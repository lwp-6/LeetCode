class Trie {
public:
    Trie *next[26];
    bool isEnd;
    /** Initialize your data structure here. */
    Trie() {
        int i;
        for(i = 0; i < 26; ++i)
        {
            next[i] = NULL;
        }
        isEnd = false;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        Trie *p = this;
        for(char &c : word)
        {
            if(p->next[c - 'a'] == NULL)
            {
                p->next[c - 'a'] = new Trie();
                p = p->next[c - 'a'];
            }
            else
            {
                p = p->next[c - 'a'];
            }
            
        }
        p->isEnd = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        Trie *p = this;
        for(char &c : word)
        {
            if(p->next[c - 'a'] == NULL)
            {
                return false;
            }
            p = p->next[c - 'a'];
        }
        return p->isEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Trie *p = this;
        for(char &c : prefix)
        {
            if(p->next[c - 'a'] == NULL)
            {
                return false;
            }
            p = p->next[c - 'a'];
        }
        return true;
    }
};
